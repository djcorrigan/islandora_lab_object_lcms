<?php

/*
@file

Module for LCMS

*/

/*
function islandora_lab_object_lcms_menu(){
  return array(
    'islandora/object/%islandora_object/test_ingest_lcms' => array(
        'title' => 'Ingest LCMS',
        'page callback' => 'islandora_lab_object_lcms_ingest',
        'page arguments' => array(2),
        'access callback' => TRUE,
      )
  );
}
*/


function islandora_lab_object_lcms_forms($form_id, $args){
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param $form_id
   * @param $args
   * @return $forms
   *
   * Implements hook_forms($form_id, $args)
   *
   * This function is used to associate a new Form ID with an existing form constructor.
   */
  $forms = array();
  switch($form_id){
    /**
     * ## Related LCMS Form
     * __Form ID:__ `related_lcms_form`
     *
     * __Form Base ID:__ `related_islandora_objects_form`
     *
     * Creates a `related_islandora_objects_form` with the `$cmodel` and `$relationships`
     * arguments set as:
     *
     *      $cmodels = array('islandora:lcms_cmodel');
     *      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf'),);
     */
    case 'related_lcms_form':
      $cmodels = array('islandora:lcms_cmodel');
      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf', 'isMemberOf',),);

      $args[] = $cmodels;
      $args[] = $relationships;

      $forms['related_lcms_form'] = array(
        'callback' => 'related_islandora_objects_form',
        'callback arguments' => $args,
      );
      break;
  }
  return $forms;
}

 /**
 * @function islandora_lab_object_lcms_islandora_required_objects(IslandoraTuque $connection)
 *
 * * Implements hook_islandora_required_objects()
 * 
 *  @author Dalton Mackenzie <demackenzie@upei.ca>
 *
 *
 * */
function islandora_lab_object_lcms_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'islandora_bioinformatics_base', 'base_functions');

  $module_path = drupal_get_path('module', 'islandora_lab_object_lcms');
  $lcms_cm = $connection->repository->constructObject('islandora:lcms_cmodel');
  $lcms_cm->owner = 'fedoraAdmin';
  $lcms_cm->label = 'LCMS Content Model';
  $lcms_cm->models = 'fedora-system:ContentModel-3.0';

  // RELS
  $lcms_cm->relationships->add(FEDORA_MODEL_URI, 'hasModel', 'islandora:lab_object_cmodel');

  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $lcms_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/lcms_ds_composite_model.xml", FALSE);
  $lcms_cm->ingestDatastream($datastream);
  
  //Create relationship with LabObject
  $lcms_cm->relationships->add(FEDORA_MODEL_URI, 'hasModel', 'islandora:lab_object_cmodel');

  $lcms_collection = $connection->repository->constructObject('islandora:lcms_collection');
  $lcms_collection->owner = 'fedoraAdmin';
  $lcms_collection->label = 'LCMS Collection';
  $lcms_collection->models = 'islandora:collectionCModel';
  $lcms_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:lab_object_collection');
  $datastream = $lcms_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/lcms_collection_policy.xml", FALSE);
  $lcms_collection->ingestDatastream($datastream);

  $lcms_cm->relationships->add(FEDORA_RELS_EXT_URI, 'datarel_isPartOf', 'islandora:fraction_cmodel');

  return array(
    'islandora_lab_object_lcms' => array(
      'title' => 'LCMS',
      'objects' => array(
          $lcms_cm,
          $lcms_collection,
      ),
    ),
  );
}



function islandora_lab_object_lcms_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_lab_object_lcms');
  return array(
    'LCMS Form' => array(
      'form_file' => "$module_path/xml/islandora_lab_object_lcms_form.xml",
    ),
  );
}


function islandora_lab_object_lcms_islandora_xml_form_builder_form_associations() {
  $module_path = drupal_get_path('module', 'islandora_lab_object_lcms');
  return array(
    'islandora_lab_object_lcms_form' => array(
      'content_model' => 'islandora:lcms_cmodel',
      'form_name' => 'LCMS Form',
      'dsid' => 'LCMS',
      'title_field' => array('run_title'),
      'transform' => '',
      'template' => FALSE,
    ),
  );
}

function islandora_lab_object_lcms_islandora_lcms_cm_islandora_ingest_steps(array $configuration) {
  return array(
    'islandora_lab_object_lcms_csv_file_upload' => array(
      'weight' => 8,
      'type' => 'form',
      'form_id' => 'islandora_lab_object_lcms_upload_csv_form',
      'module' => 'islandora_lab_object_lcms',
      'file' => 'includes/islandora_lab_object_lcms_upload_csv.form.inc'
    ),
    'islandora_lab_object_lcms_raw_file_upload' => array(
      'weight' => 9,
      'type' => 'form',
      'form_id' => 'islandora_lab_object_lcms_upload_raw_form',
      'module' => 'islandora_lab_object_lcms',
      'file' => 'includes/islandora_lab_object_lcms_upload_raw.form.inc'
    )
  );
}

function islandora_lab_object_lcms_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_lab_object_lcms' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/lcms_theme',
      'pattern' => 'islandora_lab_object_lcms__',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

function islandora_lab_object_lcms_islandora_lcms_cm_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_lab_object_lcms', array('islandora_object' => $object));
  return array('' => $output);
}


/**
 * @author Quintin Dawson qdawson@upei.ca
 * This function should create a new lcms object and create a relationship between it and the $parent object
 */
function islandora_lab_object_lcms_ingest(AbstractObject $parent) {
  $collection = islandora_object_load('islandora:lcms_collection');
  if($collection !== FALSE) {
    if (($configuration = islandora_lab_object_load_ingest_configuration($collection, $parent)) !== FALSE) {
      module_load_include('inc', 'islandora', 'includes/ingest.form');
      return drupal_get_form('islandora_ingest_form', $configuration);
    }
  }
  drupal_not_found();
}


function islandora_lab_object_load_ingest_configuration(AbstractObject $collection, AbstractObject $parent) {
  $is_collection_object = in_array('islandora:collectionCModel', $collection->models);
  $has_policy = isset($collection['COLLECTION_POLICY']);
  if (!$is_collection_object || !$has_policy) {
    return array();
  }

  $object = $collection->repository->constructObject('islandora');
  $object->label = 'New Object';

  $results = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $collection->id);
  if (empty($results)) {
    $object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $collection->id);
  }

  $results = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isPartOf', $parent->id);
  if (empty($results)) {
    $object->relationships->add(FEDORA_RELS_EXT_URI, 'isPartOf', $parent->id);
  }

  $policy = new CollectionPolicy($collection['COLLECTION_POLICY']->content);

  return array(
    'collection' => $collection,
    'models' => array('islandora:lcms_cmodel'),//array_keys($policy->getContentModels()),
    'objects' => array($object),
    'parent' => $collection->id,
  );
}

/**
* @function lcms_LCMS_to_array
* This function will take in an lcms object, and then construct an array from
* its LCMS datastream, containing all of its relevant metadata.
* This metadata can then be used in the forms displaying info about the lcms object.
*
* @author Dalton Mackenzie <demackenzie@upei.ca>
*
* @param $lcms_object
*  An lcms object
* @return $lcms_metadata
*  an array containing the lcms meta-data
*/
function lcms_LCMS_to_array($lcms_object) {
  
  $ns = "http://107.170.42.52/lcms.xsd";
  $lcms_xml = new SimpleXMLElement($lcms_object["LCMS"]->content);

  $lcms_metadata = array();

  foreach ($lcms_xml->children($ns) as $part) {
    switch ((string) $part->getName()) {
      case "run_title":
        $lcms_metadata["run_title"] = ((string)$part) ? (string)$part:"";
        break;
      case "sample_info":
        //Get the sequence name
        $seq_name = $part->seq_name;
        $lcms_metadata["seq_name"] = ((string)$seq_name) ? (string)$seq_name:"";
        //Get the user the lcms is for
        $user_select = $part->user_select;
        $lcms_metadata["user_select"] = ((string)$user_select) ? (string)$user_select:"";
        //Get the solvent
        $meoh_solv = $part->solvent->methanol_solvent;
        $lcms_metadata["meoh_solv"] = ((string)$meoh_solv ? (string)$meoh_solv:"");
        $acetonitrile_solv = $part->solvent->acetonitrile_solvent;
        $lcms_metadata["acetonitrile_solv"] = ((string)$acetonitrile_solv ? (string)$acetonitrile_solv:"");
        $other_solv = $part->solvent->other_solvent;
        $lcms_metadata["other_solv"] = ((string)$other_solv ? (string)$other_solv:"");
        //Get the solvent concentration
        $conc_100 = $part->concentration->onehundred_microlitres;
        $lcms_metadata["conc_100"] = ((string)$conc_100 ? (string)$conc_100:"");
        $conc_500 = $part->concentration->fivehundred_microlitres;
        $lcms_metadata["conc_500"] = ((string)$conc_500 ? (string)$conc_500:"");
        $conc_other = $part->concentration->other_concentration;
        $lcms_metadata["conc_other"] = ((string)$conc_other ? (string)$conc_other:"");
        //Get other concentration/solvent details
        $other_conc_solv = $part->other_conc_solv;
        $lcms_metadata["other_conc_solv"] = ((string)$other_conc_solv ? (string)$other_conc_solv:"");
        $samp_ori = $part->sample_origin;
        $lcms_metadata["samp_ori"] = ((string)$samp_ori ? (string)$samp_ori:"");
        $other_protocol = $part->other_protocol;
        $lcms_metadata["other_protocol"] = ((string)$other_protocol ? (string)$other_protocol:"");
        break; //End sample_info
      case "analysis_required":
       
       
        //Get the sample intro
        $samp_intro = $part->sample_intro;
        $lcms_metadata["samp_intro"] = ((string)$samp_intro ? (string)$samp_intro:"");
        //Get the different detection ionization values
        $esi_neg = $part->detection_ionization->esi_neg;
        $lcms_metadata["esi_neg"] = ((string)$esi_neg ? (string)$esi_neg:"");
        $esi_pos = $part->detection_ionization->esi_pos;
        $lcms_metadata["esi_pos"] = ((string)$esi_pos ? (string)$esi_pos:"");
        $apci_neg = $part->detection_ionization->apci_neg;
        $lcms_metadata["apci_neg"] = ((string)$apci_neg ? (string)$apci_neg:"");
        $apci_pos = $part->detection_ionization->apci_pos;
        $lcms_metadata["apci_pos"] = ((string)$apci_pos ? (string)$apci_pos:"");
        $pda = $part->detection_ionization->pda;
        $lcms_metadata["pda"] = ((string)$pda ? (string)$pda:"");
        $elsd = $part->detection_ionization->elsd;
        $lcms_metadata["elsd"] = ((string)$elsd ? (string)$elsd:"");
        $ei = $part->detection_ionization->ei;
        $lcms_metadata["ei"] = ((string)$ei ? (string)$ei:"");
        //Get the mass range
        $mass_range = $part->mass_range;
        $lcms_metadata["mass_range"] = ((string)$mass_range ? (string)$mass_range:"");
        //Get the lc solvent system
        $lc_solvent_sys = $part->lc_solvent_system;
        $lcms_metadata["lc_solvent_sys"] = ((string)$lc_solvent_sys ? (string)$lc_solvent_sys:"");
        //Get the types of analysis
        $types_of_analysis = $part->types_of_analysis;
        $lcms_metadata["types_of_analysis"] = ((string)$types_of_analysis ? (string)$types_of_analysis:"");
        //Get the specific analysis
        $specific_analysis = $part->specific_analysis;
        $lcms_metadata["specific_analysis"] = ((string)$specific_analysis ? (string)$specific_analysis:"");
        //Get the ions of interest
        $ions_of_interest = $part->ions_of_interest;
        $lcms_metadata["ions_of_interest"] = ((string)$ions_of_interest ? (string)$ions_of_interest:"");

        break;
      case "internal_use_only":

        //Get the analyst
        $analyst = $part->analyst;
        $lcms_metadata["analyst"] = ((string)$analyst ? (string)$analyst:"");

        //Get the date
        $date = $part->date;
        $lcms_metadata["date"] = ((string)$date ? (string)$date:"");

        //Get the instrument
        $instrument = $part->instrument;
        $lcms_metadata["instrument"] = ((string)$instrument ? (string)$instrument:"");
        
        //Get the method
        $method = $part->method;
        $lcms_metadata["method"] = ((string)$method ? (string)$method:"");

        //Get the solvent_system
        $solvent_system = $part->solvent_system;
        $lcms_metadata["solvent_system"] = ((string)$solvent_system ? (string)$solvent_system:"");

        //Get the column_used
        $column_used = $part->column_used;
        $lcms_metadata["column_used"] = ((string)$column_used ? (string)$column_used:"");

        //Get the datapath
        $datapath = $part->datapath;
        $lcms_metadata["datapath"] = ((string)$datapath ? (string)$datapath:"");

        //Get the comments_for_analyst
        $comments_for_analyst = $part->comments_for_analyst;
        $lcms_metadata["comments_for_analyst"] = ((string)$comments_for_analyst ? (string)$comments_for_analyst:"");

        break;
      }
  }

  return $lcms_metadata;
}

function islandora_lab_object_lcms_form_related_lcms_form_alter(&$form, &$form_state) {
/** 
* @author Dalton Mackenzie
* @param &$form
* @param &$form_state
*
* Alters the islandora_related_objects_base form to display lcms information.
* LCMS info displayed should include experiment title, seq name and user.
*/
  $object = $form_state['object'];
  $lcms_objects = $form_state['related_objects'];
  $form['cmodel'] = array(
    '#markup' => 'LCMS',
    '#prefix' => '<h1>',
    '#suffix' => '</h1>',
  );  

  $header = array(
    'lab_id' => t("Lab ID"),
    'run_title' => t("Run"),
    'seq_name' => t("Sequence Name"),
    'user' => t("Researcher"),
  );  

  $options = array();
  
  foreach($lcms_objects as $lcms_object) {
    $cur_lcms_metadata = lcms_LCMS_to_array($lcms_object);
    $lcms_url = "<a href='/islandora/object/{$lcms_object->id}'>{$cur_lcms_metadata['identifier']}</a>";
    $options[$lcms_object->id] = array(
      'lab_id' => $lcms_url,
      'run_title' => $cur_lcms_metadata['run_title'],
      'seq_name' => $cur_lcms_metadata['seq_name'],
      'user' => $cur_lcms_metadata['user_select'],
      '#attributes' => array("style" => "max-height: 100px;"),
    );  
  }
  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t("There are no related lcms objects."),
  );  

  return $form;
}
